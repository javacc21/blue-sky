options {
    DEFAULT_LEXICAL_STATE=QUTE_EXPRESSION;
    FAULT_TOLERANT=true;
}

TOKEN :
{
   <COMMA : ",">
   |
   <IN : "in">
   |
   <AS : "as">
   |
   <OR : "||">
   |
   <OR2 : "or">
   |
   <AND : "&&">
   |
   <AND2 : "and">
   |
   <SIMPLE_EQUALS : "=">
   |
   <EQUALS : "==">
   |
   <EQUALS2 : "eq">
   |
   <EQUALS3 : "is">
   |
   <GT : ">">
   |
   <ALT_GT : "gt">
   |
   <GE : ">=">
   |
   <ALT_GE : "ge">
   |
   <LT : "<">
   |
   <ALT_LT : "lt">
   |
   <LE : "<=">
   |
   <ALT_LE : "le">
   |
   <DOT_DOT : "..">
   |
   <PLUS : "+">
   |
   <MINUS : "-">
   |
   <TIMES : "*">
   |
   <DIVIDE : "/">
   |
   <DOT : ".">   
   |
   <EXCLAM : "!">
   |
   <OPEN_BRACKET : "[">
   |
   <CLOSE_BRACKET : "]">
   |
   <NULL : "null">
   |
   <TRUE : "true">
   |
   <FALSE : "false">   
   |
   <INTEGER : (["0"-"9"])+>
   |
   <DECIMAL : <INTEGER> "." <INTEGER>>
   |
   <STRING_LITERAL :
      ("\""
          ((~["\\", "\""]) | ("\\" ~[]))*
      "\"")
      |
      ("'"
          ((~["\\", "'"]) | ("\\" ~[]))*
      "'")
   >
   |
   <RAW_STRING : "r" (("\"" (~["\""])* "\"") | ("'" (~["'"])* "'"))>   
}

<QUTE_EXPRESSION> SKIP :
{
   <(" "| "\t"| "\n"| "\r")+> 
}

<QUTE_EXPRESSION> TOKEN :
{
   <#ASCII_LETTER : ["a"-"z", "A"-"Z"]>
   |
   <#ASCII_DIGIT : ["0"-"9"]>
   |
   <C_IDENTIFIER : ("_"|<ASCII_LETTER>)("_"|<ASCII_LETTER>|<ASCII_DIGIT>)*>
}

// These are the the string and numerical literals from the JSON spec
TOKEN #Literal : 
{
    <#ESCAPE1 : "\\" (["\\", "\"", "/","b","f","n","r","t"])>
    |
    <#ESCAPE2 : "\\u" (["0"-"9", "a"-"f", "A"-"F"]) {4}>
    |
    <#REGULAR_CHAR : ~["\u0000"-"\u001F","\"","\\"]>
    |
    <JSON_STRING : "\"" (<REGULAR_CHAR>|<ESCAPE2>|<ESCAPE1>)* "\""> #JSONString
    |
    <#ZERO : "0">
    |
    <#NON_ZERO : (["1"-"9"])(["0"-"9"])*>
    |
    <#FRACTION : "." (["0"-"9"])+>
    |
    <#EXPONENT : ["E","e"]["+","-"](["1"-"9"])+>
    |
    <NUMBER : ("-")?(<ZERO>|<NON_ZERO>)(<FRACTION>)?(<EXPONENT>)?> #NumberLiteral2
}

TOKEN #Delimiter :
{
   <OPEN_PAREN : "(">
   |
   <CLOSE_PAREN : ")">
}

Expression : OrExpression;

OrExpression : 
    AndExpression
    (
        (<OR>|<OR2>) AndExpression
    )*
;

AndExpression : 
    EqualityExpression
    (
        (<AND>|<AND2>) EqualityExpression
    )*
;

EqualityExpression : 
    RelationalExpression
    [
        (<EQUALS>|<EQUALS2>|<EQUALS3>)
        RelationalExpression
    ]
;

RelationalExpression : 
    RangeExpression
    [
        (<GT>|<GE>|<LT>|<LE>|<ALT_GT>|<ALT_GE>|<ALT_LE>|<ALT_LT>)
        RangeExpression
    ]
;

RangeExpression : 
    AdditiveExpression
    [
       <DOT_DOT>
       [
         LOOKAHEAD AdditiveExpression
       ]
    ]
;

AdditiveExpression : 
    MultiplicativeExpression
    (
           (<PLUS>|<MINUS>)
           MultiplicativeExpression
    )*
;

MultiplicativeExpression : 
    UnaryExpression
    (
          (<TIMES>|<DIVIDE>)
          UnaryExpression
    )*
;

UnaryExpression #void : 
    UnaryPlusMinusExpression
    |
    NotExpression
    |
    DefaultToExpression
;

UnaryPlusMinusExpression : 
    (<PLUS>|<MINUS>) DefaultToExpression
;

NotExpression : 
    <EXCLAM>
    DefaultToExpression
;

DefaultToExpression : 
    PrimaryExpression
    (
        LOOKAHEAD(<EXCLAM>BaseExpression, {getToken(2).getType() !=TokenType.C_IDENTIFIER || getToken(3).getType() != TokenType.SIMPLE_EQUALS})
        <EXCLAM>PrimaryExpression
    )*
    [
       <EXCLAM>
    ]
;

PrimaryExpression : 
  BaseExpression
  (
    LOOKAHEAD(<DOT>|<OPEN_BRACKET>|<OPEN_PAREN>)
    (
      DotKey
      |
      DynamicKey
      |
      MethodInvoke            
    )
  )*
;

BaseExpression : 
    <C_IDENTIFIER>
    |
    NumberLiteral    
    |
    StringLiteral
    |
    BooleanLiteral
    |
    NullLiteral
    |
    Parenthesis
;


DotKey #void : 
    <DOT>
    (<C_IDENTIFIER>|<TIMES>)
;

DynamicKey #void : 
    <OPEN_BRACKET>Expression<CLOSE_BRACKET>
;

MethodInvoke #void : 
  <OPEN_PAREN>[ArgsList]<CLOSE_PAREN>
;

ArgsList #void : 
    (
        PositionalArgsList!
    )
;

PositionalArgsList : 
    Expression
    (
       [<COMMA>]
       Expression
    )*
;

StringLiteral : <STRING_LITERAL>|<RAW_STRING>;

Parenthesis : 
   <OPEN_PAREN>
   Expression
   <CLOSE_PAREN>!
;

NumberLiteral : 
    <INTEGER>|<DECIMAL>
;

BooleanLiteral : 
    <TRUE>|<FALSE>
;

NullLiteral : <NULL>;
