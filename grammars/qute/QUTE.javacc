options {
   DEFAULT_LEXICAL_STATE=QUTE_TEXT;
   SPECIAL_TOKENS_ARE_NODES;
   PARSER_PACKAGE="qute";
}

INCLUDE("QEL.javacc")

TOKEN : 
{
   <#NO_OPEN_CURLY: ~["{"]>
   |
   <#ESCAPED_OPEN_CURLY: "\\{">
   |
   <#WS: ([" ", "\n", "\r", "\t"])+>
   |
   <TEXT : (<NO_OPEN_CURLY>|<ESCAPED_OPEN_CURLY>)+> #Text
   |
   <OPEN_CURLY : "{"> : QUTE_EXPRESSION
   |
   <IF : "{#if" <WS>> : QUTE_EXPRESSION
   |
   <ENDIF : "{/if}">  
   |
   <ABBREVIATED_END : "{/}">  
   |
   <ELSEIF : "{#else"<WS>"if" <WS>> : QUTE_EXPRESSION
   |
   <ELSE : "{#else" (<WS>)? "}">
   |
   <START_SECTION : "{#" (<ASCII_LETTER>)+> : QUTE_EXPRESSION
   |
   <END_SECTION : "{/" (<ASCII_LETTER>)+ (<WS>)? "}">
 }

MORE :
{
   <OPEN_COMMENT : "{!"> : IN_COMMENT
}

<IN_COMMENT> MORE :
{
   <~[]>
}

<IN_COMMENT> SPECIAL_TOKEN : 
{
   <CLOSE_COMMENT: "!}"> #Comment : QUTE_TEXT
}


<QUTE_EXPRESSION> TOKEN :
{
   <CLOSE_CURLY : "}"> : QUTE_TEXT
   |
   <CLOSE_EMPTY : "/}"> : QUTE_TEXT
}

void Interpolation() : {}
{
   <OPEN_CURLY>Expression()<CLOSE_CURLY>
}

void IfBlock() : {}
{
   <IF>
   Expression()
   <CLOSE_CURLY>
   Block()
   (ElseIfBlock())*
   [ElseBlock()]
   (<ENDIF>|<ABBREVIATED_END>)
}

void ElseIfBlock() : {}
{
   <ELSEIF>
   Expression()
   <CLOSE_CURLY>
   Block()
}

void ElseBlock() : {}
{
   <ELSE> 
   Block()
}

void Section() : {}
{
   <START_SECTION>[Expression()]
   (
       <CLOSE_EMPTY>
       |
       (
          <CLOSE_CURLY>
          Block()
          // This does not check for a mismatch between the start and end tag.
          (<END_SECTION>|<ABBREVIATED_END>)
       )
   )
}


void Block() : {}
{
   (
      <TEXT>
      |
      Interpolation()
      |
      IfBlock()
      |
      Section()
   )+
}


void Root() :{}
{
   Block()
   <EOF>
}
